05/04/2018
======================
-Initialised new Git repository (repo) for project.
-Pushed to remote server.
-Established a working branch (called "ProtoWorking") 
-Established a 10x10 (unity units) plane for first maze.
-Using cubes to create the maze walls.
-Created a new material to colour the maze walls.
-Built maze walls for prototype maze.
-Built separate 'start' and 'goal' areas. 
 -Includes creating two addtional materials to colour them.
-Created the script for managing the maze's rotations.
-Tested the ball's collisions by rotating the maze about the y-axis at 1 degree
 per frame for 1000 frames.
  -The ball 'jitters' while it's stuck in the rotation but has an appropriate velocity
   after the maze stops rotating.
-Need to create script for actually controlling the maze before building the scene and 
 pushing it to the remote repo (origin).
-Didn't commit any changes

06/04/2018
========================
-Created a .gitignore file and added Temp/ and .vs/ to it
-Commited progress up to this point to the "ProtoWorking" branch
-Implemented temporary controls for rotating the maze about the z-axis.

09/04/2018
=========================
-Created a build of progress so far. Found a BUG where the ball isn't colliding properly when
 it first lands on the start floor. The initial rotation results in the ball clipping through the floor.
 However, the collisions occur as they should after a some rotations.
-The BUG occurs when the ball's transform becomes static.
-Created a script for the initial bounce when the game starts but it does not solve the problem (see above
 point) and the script is obsolete since physics materials can be easily created in the Unity editor.
-Created a script for the ball movement to apply a continuous downward force of 980 units/second (i.e. gravity)
 rather using the 'Use Gravity' in the editor. This seems to have fixed the bug for the moment.
-Implemented buttons for rotation about the x-axis.
-Tested and completed the maze in the editor. No bugs found but due to the ball and corridors'
 relative widths, movement along corridors is not smooth.
-Scaled ball down to 0.8 of its original size.
-Built and playtested. Same results as playtesting in the editor.
-Merged the 'ProtoWorking' branch into the master branch.
-Pushed all progress to remote origin server.

19/04/2018
=========================
-Starting on the maze generation algorithm by creating a QuadEdge data structure and the necessary
 structures to build it (Nodes, Dual Nodes)
-Started planning on building the initial graph (and it's dual) so that it's ready for traversal (maze-generating) 
 but the tradie installing a new drier didn't really allow for that
-The classes used are called QuadEdge, Node and Dnode, and are defined in the namespace MazeGen 

23/04/2018
=========================
-Created a new working branch to work on the maze-generating algorithm called 'mazegen'
-Worked out next steps and recorded them on the whiteboard
-Added necessary member variables to the classes in MazeGen and encapsulated them.

24/04/2018
=========================
-Shifted work to new scene 'MazeGen'.
-Added to board more planning

26/04/2018
=========================
-Committed all progress so far to working branch.
-To outline: The current goal is to create a square maze that has its corridors procedurally-generated.
 To achieve that:
     -The next step is to create a 5x5 matrix of nodes that are only connected (by quadedges) to neighbour
      node(s) that is only one index away.
     -Then a traversal through the quadedges to create the dual nodes (and dual graph) in the "middle" of the 
      regular graph. 
     -A test will then be conducted to see that the base maze has actually been created by iterating through
      the graphs in a linear fashion (using indices) and generating gameobjects to represent the nodes and edges.
     -Once the graph and its dual is created, the actual maze-generating algorithm can be implemented
      where the dual graph is traversed (via pointers) 

27/04/2018
=========================
-Started working in MazeGeneration.cs
-First addition to the Start() function is the creation and instantiation of m_Nodes (the 5x5 matrix of Nodes)
-Added more to Node, Dnode and Quadedge classes for them to be usable
-Need to figure out how the 2D array length function works

10/05/2018
=========================
-C#'s array.GetLength(int dimension) parameter counts from zero. Eg. zeroth dimension is the row and first dimension is column
-5x5 Node matrix verified using number of edges (40). 
-Perhaps possible way of generating the dual graph such the dual nodes are connected via already existing quadedges is to 
 traverse nodes and checking the next node's quadedges for possibility of duals. 
 -Need to draw 5x5 graph to verify.

21/05/2018
=========================
-Realised that the current algorithm adds new quadedges to the global quadedge set but not to the 
 quadedge set of the nodes themselves so the individual nodes cannot access the quadedges they're 
 connected to.

25/05/2018
==========================
-Generation algorithm is at the point where it creates a (matrix) graph and (matrix) dual graph
 without any errors at compilation and game start.
-Now need to test it by iterating through the graphs and representing them with a (generic) gameobject
 to see if they were implemented correctly (using a function called GraphTest()).

28/05/2018
==========================
-Starting off GraphTest() by generating the objects for the m_Nodes to see what the spacing is like.
-Hid the prototype maze and ball.
-Moved file to Google Doc - Maze Roller LOG @ rickyhhleong@gmail.com
